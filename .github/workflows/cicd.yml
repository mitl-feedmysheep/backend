name: CI/CD

on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Gradle 캐싱 추가
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: wrapper

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Define image tags
        id: meta
        run: |
          echo "IMAGE=${{ secrets.DOCKER_IMAGE }}" >> $GITHUB_OUTPUT
          echo "TAG_SHA=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "TAG_LATEST=latest" >> $GITHUB_OUTPUT



      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64/v8
          tags: |
            ${{ steps.meta.outputs.IMAGE }}:${{ steps.meta.outputs.TAG_SHA }}
            ${{ steps.meta.outputs.IMAGE }}:${{ steps.meta.outputs.TAG_LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # 추가 최적화
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          outputs: type=image,push=true

  deploy:
    name: Deploy to Self-Hosted
    needs: build_and_push
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set DOCKER_CONFIG env for this job
        run: echo "DOCKER_CONFIG=$PWD/.docker" >> $GITHUB_ENV

      - name: Prepare Docker config (avoid macOS keychain prompt)
        run: |
          mkdir -p "$DOCKER_CONFIG"
          echo '{}' > "$DOCKER_CONFIG/config.json"

      - name: Inject Docker auth to config.json (no keychain)
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          AUTH=$(printf "%s" "$DOCKERHUB_USERNAME:$DOCKERHUB_TOKEN" | base64)
          jq -n --arg auth "$AUTH" '{auths:{"https://index.docker.io/v1/":{"auth":$auth}}}' > "$DOCKER_CONFIG/config.json"
          cat "$DOCKER_CONFIG/config.json"

      - name: Detect compose command
        run: |
          if docker compose version >/dev/null 2>&1; then
            echo "COMPOSE=docker compose" >> $GITHUB_ENV
          elif command -v docker-compose >/dev/null 2>&1; then
            echo "COMPOSE=docker-compose" >> $GITHUB_ENV
          else
            echo "Docker Compose not found" >&2
            exit 1
          fi

      - name: Create .env from secrets
        run: |
          cat > .env << 'EOF'
          # Generated by GitHub Actions
          APP_IMAGE=${{ secrets.DOCKER_IMAGE }}:${{ github.sha }}
          SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_ACCESS_TOKEN_VALIDITY_IN_SECONDS=${{ secrets.JWT_ACCESS_TOKEN_VALIDITY_IN_SECONDS }}

          # --- AWS SES ---
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SES_REGION=${{ secrets.AWS_SES_REGION }}

          # --- Mail provider selection ---
          MAIL_PROVIDER=${{ secrets.MAIL_PROVIDER }}

          # --- Gmail SMTP (used when mail.provider=gmail) ---
          SPRING_MAIL_HOST=${{ secrets.SPRING_MAIL_HOST }}
          SPRING_MAIL_PORT=${{ secrets.SPRING_MAIL_PORT }}
          SPRING_MAIL_USERNAME=${{ secrets.SPRING_MAIL_USERNAME }}
          SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }}
          SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH=${{ secrets.SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH }}
          SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE=${{ secrets.SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE }}

          # --- Mail From/Reply-To ---
          MAIL_FROM=${{ secrets.MAIL_FROM }}
          MAIL_REPLY_TO=${{ secrets.MAIL_REPLY_TO }}

          # --- Cloudflare R2 Configuration ---
          CLOUDFLARE_R2_ACCESS_KEY_ID=${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          CLOUDFLARE_R2_SECRET_ACCESS_KEY=${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          CLOUDFLARE_R2_BUCKET_NAME=${{ secrets.CLOUDFLARE_R2_BUCKET_NAME }}
          CLOUDFLARE_R2_ENDPOINT=${{ secrets.CLOUDFLARE_R2_ENDPOINT }}
          CLOUDFLARE_R2_PUBLIC_DOMAIN=${{ secrets.CLOUDFLARE_R2_PUBLIC_DOMAIN }}
          EOF

      - name: Pull image
        run: $COMPOSE pull app | cat

      - name: Start/Update service
        run: $COMPOSE up -d app | cat

      - name: Cleanup dangling images
        run: docker image prune -f | cat

