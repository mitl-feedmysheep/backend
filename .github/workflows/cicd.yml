name: CI/CD

on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Define image tags
        id: meta
        run: |
          echo "IMAGE=${{ secrets.DOCKER_IMAGE }}" >> $GITHUB_OUTPUT
          echo "TAG_SHA=${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "TAG_LATEST=latest" >> $GITHUB_OUTPUT



      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.IMAGE }}:${{ steps.meta.outputs.TAG_SHA }}
            ${{ steps.meta.outputs.IMAGE }}:${{ steps.meta.outputs.TAG_LATEST }}
          cache-from: type=registry,ref=${{ steps.meta.outputs.IMAGE }}:latest
          cache-to: type=inline

  deploy:
    name: Deploy to Self-Hosted
    needs: build_and_push
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: DockerHub Login (for pull)
        if: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create .env from secrets
        run: |
          cat > .env << 'EOF'
          # Generated by GitHub Actions
          APP_IMAGE=${{ secrets.DOCKER_IMAGE }}:${{ github.sha }}
          SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}
          SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_ACCESS_TOKEN_VALIDITY_IN_SECONDS=${{ secrets.JWT_ACCESS_TOKEN_VALIDITY_IN_SECONDS }}
          EOF

      - name: Pull image
        run: docker compose pull app | cat

      - name: Start/Update service
        run: docker compose up -d app | cat

      - name: Cleanup dangling images
        run: docker image prune -f | cat

